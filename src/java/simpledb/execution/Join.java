package simpledb.execution;

import simpledb.storage.TupleIterator;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;

    /**
     * We introduce a tuple iterator here, which is similar to the implementation in OrderBy.java
     */
    private Iterator<Tuple> it;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    /**
     * Implemented using nested loops join(二重循环)
     */
    public Iterator<Tuple> getIterator() throws TransactionAbortedException, DbException {
        child1.rewind();
        List<Tuple> tupleList = new ArrayList<>();
        while (child1.hasNext()) {
            Tuple tupleL = child1.next();
            child2.rewind();
            while (child2.hasNext()) {
                Tuple tupleR = child2.next();
                if (p.filter(tupleL, tupleR)) {
                    int len1 = tupleL.getTupleDesc().numFields();
                    int len2 = tupleR.getTupleDesc().numFields();
                    Tuple newTuple = new Tuple(getTupleDesc());
                    for (int i = 0; i < len1; i++) {
                        newTuple.setField(i, tupleL.getField(i));
                    }
                    for (int i = 0; i < len2; i++) {
                        newTuple.setField(i + len1, tupleR.getField(i));
                    }
                    tupleList.add(newTuple);
                }
            }
        }
        return tupleList.iterator();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        int field1 = p.getField1();
        return child1.getTupleDesc().getFieldName(field1);
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        int field2 = p.getField2();
        return child2.getTupleDesc().getFieldName(field2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc tupleDesc1 = child1.getTupleDesc();
        TupleDesc tupleDesc2 = child2.getTupleDesc();
        return TupleDesc.merge(tupleDesc1, tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
        it = getIterator();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
        it = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (it != null && it.hasNext()) {
            return it.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (children.length == 2) {
            this.child1 = children[0];
            this.child2 = children[1];
        }
    }

}
